<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【分治/最小点对】 HDU 1007 Quoit Design</title>
    <url>/2018/08/12/1007/</url>
    <content><![CDATA[<p>分治，计算几何第一题。</p>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给出平面上的n个点，要求距离最近的两个点的距离的一半。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>看到这个，肯定想到了二分，但是具体如何二分？<br>距离最近的点可能出现在mid的同一边，也可能出现在mid的两边。对于每一个mid，先得到它的子区间的最小值，然后以最小值为半径，以mid点为圆心，扫一遍，看可不可以更新最小值，先求出的子区间的最小值是作为筛选条件。同时，记录圆内的点，对y值排序，方便后面确定循环的结束，因为x肯定小于ans，所以用y确定结束。之后对圆内的点，两两距离各算一遍，但是当y的差值大于等于ans时，本次循环结束。</p>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>感受了分治，现在感觉还是二分加上了递归结果。有时候，看题解，有的步骤你看不明白，不如试试不写那个步骤，会有什么后果，会帮助你理解。也许那个步骤是作者为了迎合代码中其他步骤才写的，这样子有助于提高自己。以及，vscode现在崩盘，都是悄无声息的QAQ。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100000+50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000000+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mian main</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> dbg(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> dbg(x) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">10</span>*x+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Out</span><span class="params">(<span class="keyword">int</span> a)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">9</span>)</span><br><span class="line">        Out(a/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(a%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmpx</span><span class="params">(Point x,Point y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x&lt;y.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmpy</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[a].y&lt;p[b].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l+<span class="number">1</span>==r) <span class="keyword">return</span> dis(p[l],p[r]);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> ans=min(find(l,mid),find(mid,r));</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i].x&gt;=p[mid].x-ans&amp;&amp;p[i].x&lt;=p[mid].x+ans) </span><br><span class="line">        a[++cnt]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+cnt+<span class="number">1</span>,cmpy);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=cnt;++j)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>(p[a[j]].y-p[a[i]].y&gt;=ans) <span class="keyword">break</span>;</span><br><span class="line">          ans=min(ans,dis(p[a[i]],p[a[j]])); </span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">        sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>,cmpx);</span><br><span class="line">        <span class="keyword">double</span> ans=find(<span class="number">1</span>,n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,ans/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有当你成长起来，你的一切都才能变得有力量。</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>HDU</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校第七场B 多项式分解</title>
    <url>/2019/08/09/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC7%E5%9C%BAB/</url>
    <content><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://ac.nowcoder.com/acm/contest/887/B" target="_blank">Irreducible Polynomial</a></p>
<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给一个最多$20$次的多项式，问是否能够对该多项式分解因式。能则输出$No$，不能则输出$Yes$。</p>
<a id="more"></a>

<h1 id="思路重现"><a href="#思路重现" class="headerlink" title="思路重现"></a>思路重现</h1><p>刚开始和$yls$还想着找零点，求导等骚操作，然后$yls$说他找到了规律。</p>
<p>根据代数基本定理：任何一个非零的一元n次复系数多项式，都正好有n个复数根（重根视为多个根。</p>
<p>所以，$&lt;2$次的必然不可分解，$&gt;2$次的必然可以至少因式分解出一个式子，$=2$的判断一元二次方程是否有跟即可。</p>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, LL&gt;P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> LL lINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (rt&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (rt&lt;&lt;1|1)</span></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> </span>&#123; <span class="keyword">return</span> b ? gcd(b, a%b) : a; &#125;</span><br><span class="line"><span class="keyword">int</span> _;</span><br><span class="line">LL n;</span><br><span class="line">LL a[M];</span><br><span class="line">LL de;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            de = a[<span class="number">1</span>] * a[<span class="number">1</span>] - <span class="number">4</span> * a[<span class="number">0</span>] * a[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (de &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>结论</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder ABC 136C</title>
    <url>/2019/08/06/136C/</url>
    <content><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href target="_blank"></a></p>
<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给$n$个数，对每个数可以执行减一操作，也可以不执行，能否把这$n$个数变成非减的数列。</p>
<a id="more"></a>

<h1 id="思路重现"><a href="#思路重现" class="headerlink" title="思路重现"></a>思路重现</h1><p>我一开始的想法：循环判断。对于相差大于$1$的相邻数，直接退出，返回$false$，对于连续的递减，比如$3、2、1$也退出，返回$false$，但是死$WA$，没找到原因。</p>
<p>后来发现如果有连续的数，比如$5、5、4$就会错误。</p>
<p>那么就需要正解了。</p>
<p>从后往前，如果前一个数比这个数大，就把前面的数减$1$，然后再循环一遍，如果有递减存在，就返回$false$。为什么从后往前呢，想一下$5、5、4$的情况。</p>
<p>同样的，如果要打造一个非递增数列，允许减一，就需要从前往后了。</p>
<p>再想一下，如果非递减允许加一，就是从前往后了</p>
<p>总结一下，就是要保证被操作的数要先被访问到，不然可能会错过。</p>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100000+50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n,m) for(int i=n;i&lt;=m;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000000 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mian main</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="comment">//1 1 1 1 1   RL R L R    L   RL R R  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//while(1)&#123;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">int</span> n=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">1</span>;--i)</span><br><span class="line">    <span class="keyword">if</span>(a[i]-a[i<span class="number">-1</span>]&lt;<span class="number">0</span>) a[i<span class="number">-1</span>]--;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]-a[i+<span class="number">1</span>]&gt;<span class="number">0</span>) &#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        </p>
]]></content>
      <categories>
        <category>算法</category>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>水</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校第五场I题</title>
    <url>/2019/08/02/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%94%E5%9C%BAI%E9%A2%98/</url>
    <content><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://ac.nowcoder.com/acm/contest/885/I" target="_blank">Three points</a></p>
<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><a id="more"></a>

<p>在一个$w*h$的矩形内，构造三个点$X,Y,Z$要求满足$XY=a,XZ=b,YZ=c$，$1&lt;=w,h,a,b,c&lt;=50$，保证存在解。</p>
<h1 id="思路重现"><a href="#思路重现" class="headerlink" title="思路重现"></a>思路重现</h1><p>orz一道计算几何水题我却卡了整场比赛，还是太菜了。</p>
<p>感觉卡住最主要的原因是思路不清晰，不够条理化。</p>
<p>其实首先需要注意题目保证有解，那么这一组可行解通过旋转，平移，会有两种情况：</p>
<ul>
<li>一条边在矩形的边界上</li>
<li>一个点在原点，同时有一个点在上或右的边上，也就是斜着摆放在矩形中</li>
</ul>
<p>为了方便，我们将一个点固定在原点，然后分类讨论另外两个点的情况就好了，再对三个点的顺序排列一下，一共六种可能，这道题就做完了。</p>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) (x)*(x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n,m) for(int i=n;i&lt;=m;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-12</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || ch&gt;<span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></span><br><span class="line">	<span class="keyword">double</span> x, y;</span><br><span class="line">	P(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>) :x(_x), y(_y) &#123;&#125;</span><br><span class="line">	P <span class="keyword">operator</span>-(<span class="keyword">const</span> P&amp; b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> P(x - b.x, y - b.y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">const</span> P&amp; b)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">sqrt</span>(sqr(x - b.x) + sqr(y - b.y));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;p[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> w, h, _a, _b, _c;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">fabs</span>(p[<span class="number">0</span>].dis(p[<span class="number">1</span>]) - _a) &gt; eps || <span class="built_in">fabs</span>(p[<span class="number">0</span>].dis(p[<span class="number">2</span>]) - _b) &gt; eps || <span class="built_in">fabs</span>(p[<span class="number">1</span>].dis(p[<span class="number">2</span>]) - _c) &gt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	rep(i, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p[i].x&lt;-eps || p[i].y&lt;-eps || p[i].x&gt;w + eps || p[i].y&gt;h + eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, P&amp; x, P&amp; y, P&amp; z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = P();<span class="comment">//将X点放在原点 </span></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> angle_1 = <span class="built_in">acos</span>((<span class="keyword">double</span>)(a * a + b * b - c * c) / (<span class="number">2</span> * a * b));</span><br><span class="line">	<span class="comment">//开始分类讨论放置点 </span></span><br><span class="line">	<span class="keyword">if</span> (a &lt;= w)</span><br><span class="line">	&#123;</span><br><span class="line">		y = P(a, <span class="number">0</span>);</span><br><span class="line">		z = P(b * <span class="built_in">cos</span>(angle_1), b * <span class="built_in">sin</span>(angle_1));</span><br><span class="line">		<span class="keyword">if</span> (ok()) flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">double</span> y_h = <span class="built_in">sqrt</span>(<span class="number">1.0</span> * a * a - <span class="number">1.0</span> * w * w);</span><br><span class="line">		y = P(w, y_h);</span><br><span class="line">		<span class="keyword">double</span> angle_2 = <span class="built_in">acos</span>(w * <span class="number">1.0</span> / a);</span><br><span class="line">		z = P(b * <span class="built_in">cos</span>(angle_1 + angle_2), b * <span class="built_in">sin</span>(angle_1 + angle_2));</span><br><span class="line">		<span class="keyword">if</span> (ok()) flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!flag)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (b &lt;= h)</span><br><span class="line">		&#123;</span><br><span class="line">			z = P(<span class="number">0</span>, b);</span><br><span class="line">			y = P(a * <span class="built_in">sin</span>(angle_1), a * <span class="built_in">cos</span>(angle_1));</span><br><span class="line">			<span class="keyword">if</span> (ok()) flag = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">double</span> z_x = <span class="built_in">sqrt</span>(<span class="number">1.0</span> * b * b - <span class="number">1.0</span> * h * h);</span><br><span class="line">			z = P(z_x, h);</span><br><span class="line">			<span class="keyword">double</span> angle_2 = <span class="built_in">acos</span>(h * <span class="number">1.0</span> / b);</span><br><span class="line">			y = P(a * <span class="built_in">sin</span>(angle_1 + angle_2), a * <span class="built_in">cos</span>(angle_1 + angle_2));</span><br><span class="line">			<span class="keyword">if</span> (ok()) flag = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!flag) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	rep(i, <span class="number">0</span>, <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%.12f %.12f%c"</span>, p[i].x, p[i].y, (i == <span class="number">2</span>) ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (</span><br><span class="line">		check(_a, _b, _c, p[<span class="number">0</span>], p[<span class="number">1</span>], p[<span class="number">2</span>])</span><br><span class="line">		|| check(_a, _c, _b, p[<span class="number">1</span>], p[<span class="number">0</span>], p[<span class="number">2</span>])</span><br><span class="line">		|| check(_b, _a, _c, p[<span class="number">0</span>], p[<span class="number">2</span>], p[<span class="number">1</span>])</span><br><span class="line">		|| check(_b, _c, _a, p[<span class="number">2</span>], p[<span class="number">0</span>], p[<span class="number">1</span>])</span><br><span class="line">		|| check(_c, _b, _a, p[<span class="number">2</span>], p[<span class="number">1</span>], p[<span class="number">0</span>])</span><br><span class="line">		|| check(_c, _a, _b, p[<span class="number">1</span>], p[<span class="number">2</span>], p[<span class="number">0</span>])</span><br><span class="line">		)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T = read();</span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">	&#123;</span><br><span class="line">		w = read(), h = read(), _a = read(), _b = read(), _c = read();</span><br><span class="line">		solve();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>【凸包/旋转卡壳】 POJ 2187 Beauty Contest</title>
    <url>/2018/08/12/2187/</url>
    <content><![CDATA[<p>二维平面内最远点对。</p>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给出n个点，求最远点对的距离的平方。2&lt;=n&lt;=50000</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>暴力肯定是不行的，需要学习一下新的姿势，凸包和旋转卡壳。</p>
<h2 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h2><p>二维平面内能把所有当前点收纳起来的多边形，我们称之为凸包。那么在已知点的情况下，如何求解凸包呢？</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
        <tag>凸包</tag>
        <tag>旋转卡壳</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校第六场G题</title>
    <url>/2019/08/04/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AD%E5%9C%BAG%E9%A2%98/</url>
    <content><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://ac.nowcoder.com/acm/contest/886/G" target="_blank">Is Today Friday?</a></p>
<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>这些天是星期五吗？使用$n$个$A-J$构成的$XXXX/XX/XX$，分别代表$0-9$的某一个，要求出满足所有日期都是星期五的一个排列，没有则输出$Impossible$。</p>
<a id="more"></a>

<h1 id="思路重现"><a href="#思路重现" class="headerlink" title="思路重现"></a>思路重现</h1><p>比赛的时候其实想到解法了，但是没什么时间写了。</p>
<p>其实使用全排列函数$next_permutation$函数枚举$0-9$的排列，然后依次判断即可。</p>
<p>本题的坑点在于，需要去重，去重的话$sort$后使用$unique$函数就好了。</p>
<p>关于$unique$标准库函数，其实是不重复元素移到前面，这样就可以保证前$realn$个元素是不重复的，因为是相邻元素比较，所以需要先对容器内元素排序。</p>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100000+50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n,m) for(int i=n;i&lt;=m;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000000 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mian main</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">			f = <span class="number">-1</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> s[MAXN];</span><br><span class="line"><span class="keyword">int</span> day[] = &#123; <span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (y &lt; <span class="number">1600</span> || y&gt;<span class="number">9999</span> || m &lt; <span class="number">1</span> || m&gt;<span class="number">12</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> day_m = day[m];</span><br><span class="line">	<span class="keyword">if</span> (m == <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>) day_m++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (d&lt;<span class="number">1</span> || d&gt;day_m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (m &lt;= <span class="number">2</span>) m += <span class="number">12</span>, y--;</span><br><span class="line">	<span class="keyword">int</span> c = y / <span class="number">100</span>;</span><br><span class="line">	y %= <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> w = ((y + y / <span class="number">4</span> + c / <span class="number">4</span> - <span class="number">2</span> * c + (<span class="number">26</span> * (m + <span class="number">1</span>)) / <span class="number">10</span> + d - <span class="number">1</span>) % <span class="number">7</span> + <span class="number">7</span>) % <span class="number">7</span>;</span><br><span class="line">	<span class="keyword">if</span> (w == <span class="number">5</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T = read();</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n = read();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, ++cnt);</span><br><span class="line">		rep(i, <span class="number">1</span>, n)  <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">		sort(s + <span class="number">1</span>, s + n + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> realn = unique(s + <span class="number">1</span>, s + n + <span class="number">1</span>) - s<span class="number">-1</span>;</span><br><span class="line">		rep(i, <span class="number">0</span>, <span class="number">9</span>) a[i] = i;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			<span class="keyword">bool</span> flag1 = <span class="number">1</span>;</span><br><span class="line">			rep(i, <span class="number">1</span>, realn)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> y = a[s[i][<span class="number">0</span>] - <span class="string">'A'</span>] * <span class="number">1000</span> + a[s[i][<span class="number">1</span>] - <span class="string">'A'</span>] * <span class="number">100</span> + a[s[i][<span class="number">2</span>] - <span class="string">'A'</span>] * <span class="number">10</span> + a[s[i][<span class="number">3</span>] - <span class="string">'A'</span>];</span><br><span class="line">				<span class="keyword">int</span> m = a[s[i][<span class="number">5</span>] - <span class="string">'A'</span>] * <span class="number">10</span> + a[s[i][<span class="number">6</span>] - <span class="string">'A'</span>];</span><br><span class="line">				<span class="keyword">int</span> d = a[s[i][<span class="number">8</span>] - <span class="string">'A'</span>] * <span class="number">10</span> + a[s[i][<span class="number">9</span>] - <span class="string">'A'</span>];</span><br><span class="line">				<span class="keyword">if</span> (!check(y, m, d))</span><br><span class="line">				&#123;</span><br><span class="line">					flag1 = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (flag1)</span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				rep(i, <span class="number">0</span>, <span class="number">9</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">while</span> (next_permutation(a, a + <span class="number">10</span>));</span><br><span class="line">		<span class="keyword">if</span> (!flag) <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校第十场G</title>
    <url>/2019/08/28/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%8D%81%E5%9C%BAG/</url>
    <content><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://ac.nowcoder.com/acm/contest/890/G" target="_blank">Road Construction</a></p>
<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>题意很简单，给出$n$个点的坐标，寻找一条直线，使得直线两边的点的数量相同，并且所有点到直线的距离最大，要求求出直线的斜率。</p>
<a id="more"></a>

<h1 id="思路重现"><a href="#思路重现" class="headerlink" title="思路重现"></a>思路重现</h1><p>这个题还是需要一点思路的。</p>
<p>一个优美的结论，这条直线一定是和某两点之间连线平行或垂直。</p>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>【FFT 组合数学】HDU 4609 3-idiots</title>
    <url>/2018/08/14/4609/</url>
    <content><![CDATA[<h1 id="题目链接-HDU-4609"><a href="#题目链接-HDU-4609" class="headerlink" title="题目链接 HDU 4609"></a>题目链接 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4609" target="_blank" rel="noopener">HDU 4609</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>King OMeGa catched three men who had been streaking in the street. Looking as idiots though, the three men insisted that it was a kind of performance art, and begged the king to free them. Out of hatred to the real idiots, the king wanted to check if they were lying. The three men were sent to the king’s forest, and each of them was asked to pick a branch one after another. If the three branches they bring back can form a triangle, their math ability would save them. Otherwise, they would be sent into jail.</p>
<p>However, the three men were exactly idiots, and what they would do is only to pick the branches randomly. Certainly, they couldn’t pick the same branch - but the one with the same length as another is available. Given the lengths of all branches in the forest, determine the probability that they would be saved.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>An integer T(T≤100) will exist in the first line of input, indicating the number of test cases.<br>Each test case begins with the number of branches N(3≤N≤105).</p>
<p>The following line contains N integers a_i (1≤a_i≤105), which denotes the length of each branch, respectively.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Output the probability that their branches can form a triangle, in accuracy of 7 decimal places.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2<br>4<br>1 3 3 4<br>4<br>2 3 3 4</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>0.5000000<br>1.0000000</p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>看到题面心里一惊。现在出题人这么丧心病狂的么233333.简单来说，给你n条线段，让你求出任意选三条可以组成三角形的概率。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>费劲想了一会怎样fft，发现自己还是图样。。建立一个num数组，num[i]表示序列中i的个数。然后对num[i]本身进行FFT卷积，得到新的num数组，所有原数组重元素两两相加可以得到的每个数的个数。但是并不是最终结果。** 两个case **，一是需要把本身重复的那次给删去，二来，x1,x2,x2,x1算了两次，需要整除2。</p>
<p>然后对num数组维护一下前缀和，sum[i]即表示小于等于i的数出现的总次数。对长度数组排序，这样，我们用数与数之间的大小关系就可以直接用位置了。对于每个i，需要做如下处理</p>
<ol>
<li>cnt+=sum[len]-sum[i];</li>
<li>我们假设枚举的a[i]是所选的三条边的最长边（这是一种枚举方式），则需要删去两长，一长一短，他自己和别的边三种情况。<br>至此，此题解决。</li>
</ol>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ol>
<li>对FFT的理解又加深了点，对两个卷积数组做DFT，再搞乘积，再IDFT回来。</li>
<li>需要注意的地方：<ul>
<li>对于长度的处理，一定是2的幂次</li>
<li>对于数组，从0开始用吧，从1开始容易出事。</li>
</ul>
</li>
<li>这样看来，FFT倒也变得没那么难了。</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400040</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000000+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mian main</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(a,b,c) max(a,max(b,c))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> dbg(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> dbg(x) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">10</span>*x+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复数结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex1</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> r,i;</span><br><span class="line">    complex1(<span class="keyword">double</span> _r=<span class="number">0.0</span>,<span class="keyword">double</span> _i=<span class="number">0.0</span>)&#123;</span><br><span class="line">        r=_r;i=_i;</span><br><span class="line">    &#125;</span><br><span class="line">    complex1 <span class="keyword">operator</span> +(<span class="keyword">const</span> complex1 &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> complex1(r+b.r,i+b.i);</span><br><span class="line">    &#125;</span><br><span class="line">    complex1 <span class="keyword">operator</span> -(<span class="keyword">const</span> complex1 &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> complex1(r-b.r,i-b.i);</span><br><span class="line">    &#125;</span><br><span class="line">    complex1 <span class="keyword">operator</span> *(<span class="keyword">const</span> complex1 &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> complex1(r*b.r-i*b.i,r*b.i+i*b.r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//反转变换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(complex1 y[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=len/<span class="number">2</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j) swap(y[i],y[j]);</span><br><span class="line">        k=len/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=k)&#123;</span><br><span class="line">            j-=k;k/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;k) j+=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(complex1 y[],<span class="keyword">int</span> len,<span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    change(y,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">2</span>;h&lt;=len;h&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">complex1 <span class="title">wn</span><span class="params">(<span class="built_in">cos</span>(-on*<span class="number">2</span>*PI/h),<span class="built_in">sin</span>(-on*<span class="number">2</span>*PI/h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=h)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">complex1 <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+h/<span class="number">2</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                complex1 u=y[k];</span><br><span class="line">                complex1 t=w*y[k+h/<span class="number">2</span>];</span><br><span class="line">                y[k]=u+t;</span><br><span class="line">                y[k+h/<span class="number">2</span>]=u-t;</span><br><span class="line">                w=w*wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on==<span class="number">-1</span>) </span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">       y[i].r/=len;</span><br><span class="line">&#125;</span><br><span class="line">complex1 x1[maxn],x2[maxn];</span><br><span class="line"><span class="keyword">int</span> T,n,a[maxn/<span class="number">4</span>];</span><br><span class="line">ll num[maxn],sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=read();</span><br><span class="line">        mem(num,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) a[i]=read(),num[a[i]]++;</span><br><span class="line">        sort(a,a+n);</span><br><span class="line">        <span class="keyword">int</span> len1=a[n<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;<span class="number">2</span>*len1) len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//dbg(len);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;++i) x1[i]=complex1(num[i],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len1;i&lt;len;++i) x1[i]=complex1(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//for(int i=0;i&lt;len;++i) dbg(x1[i].r);</span></span><br><span class="line">        fft(x1,len,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) x1[i]=x1[i]*x1[i];</span><br><span class="line">        fft(x1,len,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)     num[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)(x1[i].r+<span class="number">0.5</span>);</span><br><span class="line">        len=<span class="number">2</span>*a[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) </span><br><span class="line">            num[a[i]+a[i]]--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i) num[i]/=<span class="number">2</span>;</span><br><span class="line">        sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        mem(sum,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>]+num[i];</span><br><span class="line">        ll cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//长度和大于a[i]</span></span><br><span class="line">            cnt+=sum[len]-sum[a[i]];</span><br><span class="line">           <span class="comment">// dbg(cnt);</span></span><br><span class="line">            cnt-=(<span class="keyword">long</span> <span class="keyword">long</span>)(n<span class="number">-1</span>-i)*(n-i<span class="number">-2</span>)/<span class="number">2</span>;</span><br><span class="line">            cnt-=(n<span class="number">-1</span>);</span><br><span class="line">            cnt-=(<span class="keyword">long</span> <span class="keyword">long</span>)(i)*(n-i<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//dbg(cnt);</span></span><br><span class="line">        ll tot=(<span class="keyword">long</span>  <span class="keyword">long</span>)n*(n<span class="number">-1</span>)/<span class="number">6</span>*(n<span class="number">-2</span>);</span><br><span class="line">        <span class="comment">//dbg(tot);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.7lf\n"</span>,(<span class="keyword">double</span>)cnt/tot);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>别再给自己找那么多借口，总是要做的。</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>HDU</category>
      </categories>
      <tags>
        <tag>FFT</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>7.18随笔.md</title>
    <url>/2020/07/18/7-18%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>要是自己有本事的话就不会这么难过了。</p>
<a id="more"></a>

<p>一直处于浑浑噩噩的状态，可能就是觉得考本校太容易了吧，可是你也不想想，你为什么没有保研的资格？不就是浑浑噩噩？不知道自己究竟想要什么！没有目标作为驱动力！</p>
<p>我不想再因为自己没有努力而导致的自己的没本事而难过，如果我可以选择的话。</p>
<p>趁现在还有选择的机会，冲吧。</p>
<p>关于择校，反正都是数一、英一、政治，唯一有区别的可能就是专业课，而今年大势所趋，可能BIT也会把专业课改成408，这种情况下，有可能我会直接选择国科大。。毕竟还是要冲一把的，专业课差别都不大，当然，是在自己复习的不错的情况下，当下还是要好好复习，尤其是数学，得数学者得天下！</p>
<p>冲呀！！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>【BFS】 POJ 3278 抓牛</title>
    <url>/2018/08/18/3278/</url>
    <content><![CDATA[<p>现在水题都得调很久qaq。</p>
<a id="more"></a>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>[<a href="http://poj.org/problem?id=3278]" target="_blank" rel="noopener">http://poj.org/problem?id=3278]</a>(Catch That Cow)</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.</p>
<ul>
<li>Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute</li>
<li>Teleporting: FJ can move from any point X to the point 2 × X in a single minute.</li>
</ul>
<p>If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line 1: Two space-separated integers: N and K</p>
<h2 id="Ouput"><a href="#Ouput" class="headerlink" title="Ouput"></a>Ouput</h2><p>Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>5 17</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>4</p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>一条直线上，从A到B最少需要几步，每步可以想左，向右，或者闪现到当前位置*2的位置。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>显然如果写dfs会是个无底洞，来写bfs。</p>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>刚开始傻乎乎的让开始位置保持小，因为这个wa。<br>后来又因为多组样例wa，算了，多写也不多余，以后每次都加上多组样例，同时注意初始化问题。<br>结构体重载玩的还是不行啊，一直有bug。待调。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000000+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mian main</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || ch&gt;<span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span>&amp;&amp;ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Out</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a&gt;<span class="number">9</span>)</span><br><span class="line">		Out(a / <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(a % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, k, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> s, dis;</span><br><span class="line">&#125;hh,ss;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">100000</span> + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">100000</span> ) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(node h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"> 	mem(vis, <span class="number">0</span>);</span><br><span class="line">	q.push(h);</span><br><span class="line">	vis[h.s] = <span class="number">1</span>;</span><br><span class="line">	h.dis = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> xx = h.s;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty() &amp;&amp; xx != k)</span><br><span class="line">	&#123;</span><br><span class="line">		node yy=q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">if</span>(yy.s==k) &#123;<span class="keyword">return</span> yy.dis;&#125;</span><br><span class="line">		xx=yy.s+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(check(xx))&#123;</span><br><span class="line">			ss.s=xx;ss.dis=yy.dis+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(!vis[xx])&#123;</span><br><span class="line">				vis[xx]=<span class="number">1</span>;q.push(ss);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(xx==k) &#123;<span class="keyword">return</span> ss.dis;&#125;</span><br><span class="line">		xx=yy.s<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(check(xx))&#123;</span><br><span class="line">			ss.s=xx;ss.dis=yy.dis+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(!vis[xx])&#123;</span><br><span class="line">				vis[xx]=<span class="number">1</span>;q.push(ss);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(xx==k) &#123;<span class="keyword">return</span> ss.dis;&#125;</span><br><span class="line">		xx=yy.s&lt;&lt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(check(xx))&#123;</span><br><span class="line">			ss.s=xx;ss.dis=yy.dis+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(!vis[xx])&#123;</span><br><span class="line">				vis[xx]=<span class="number">1</span>;q.push(ss);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(xx==k) &#123;<span class="keyword">return</span> ss.dis;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k))&#123;</span><br><span class="line">	hh.s=n;hh.dis=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;bfs(hh)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>明天会更好。</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>【FWT】 CodeForces 663E - Binary Table</title>
    <url>/2018/08/14/663e/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://codeforces.com/problemset/problem/663/E" target="_blank" rel="noopener">Codefoces 663E</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a table consisting of n rows and m columns. Each cell of the table contains either 0 or 1. In one move, you are allowed to pick any row or any column and invert all values, that is, replace 0 by 1 and vice versa.</p>
<p>What is the minimum number of cells with value 1 you can get after applying some number of operations?</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input contains two integers n and m (1 ≤ n ≤ 20, 1 ≤ m ≤ 100 000) — the number of rows and the number of columns, respectively.</p>
<p>Then n lines follows with the descriptions of the rows. Each line has length m and contains only digits ‘0’ and ‘1’.</p>
<h2 id="Ouput"><a href="#Ouput" class="headerlink" title="Ouput"></a>Ouput</h2><p>Output a single integer — the minimum possible number of ones you can get after applying some sequence of operations.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3 4<br>0110<br>1010<br>0111</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>2</p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给出一个n*m的由0和1组成的矩阵，允许你对每行或者每列进行翻转操作（0-&gt;1,1-&gt;0)，问可以得到的最少的1的个数是多少。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先想到的肯定是暴力啦<del>~ 菜鸡如我 ~</del>。毫不费力的想到了一个O(m*2<br>^n)的算法，因为n比较小，枚举每行的操作，然后对每一列判断一下就好。<br>正解，其实主要还是得靠异或的优良性质。我们还是需要枚举针对每一行的变化，ans[k]就表示状态为k时最少的1的个数，这里的状态为k指的是k的二进制表示某一位是1就代表这一行进行翻转，否则不翻转。然后用a[i]来表示列表示的二进制数为i的列的个数，i^k=j就是这一行翻转后得到的这一列表示的新的数，然后用b[j]表示这一列当前0和1的个数较少的那个，其实是对这一列是否进行翻转的一个贪心。由于异或优良性质，有i^(i^k)=k，也就是(i^j)=k，所以就可以妥妥的用FWT卷积啦！</p>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ol>
<li>暴力出奇迹</li>
<li>异或具有非常神奇的性质。<ul>
<li>无论怎样都满足的交换律简直是个大bug</li>
<li>和自己异或始终等于0，所以就有，i^i^j=i</li>
<li>在交换，查重之类都有应用</li>
<li>交换 a=a^b,b=a^b,a=a^b，真的很有趣</li>
<li>查重，在只有一个重复或者只有一个不重复的情况下</li>
</ul>
</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1&lt;&lt;20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100000+50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000000+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mian main</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(a,b,c) max(a,max(b,c))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> dbg(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> dbg(x) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">10</span>*x+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,len;</span><br><span class="line">ll a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">25</span>][maxm];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(ll *P,<span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;len;j+=p)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;++k)&#123;</span><br><span class="line">                ll x=P[j+k],y=P[j+k+i];</span><br><span class="line">                P[j+k]=(x+y)/opt;P[j+k+i]=(x-y)/opt;            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();m=read();len=<span class="number">1</span>&lt;&lt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j) x=(x&lt;&lt;<span class="number">1</span>)+s[j][i]-<span class="string">'0'</span>;a[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) b[i]=b[i&gt;&gt;<span class="number">1</span>]+(i&amp;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) b[i]=min(b[i],n-b[i]);</span><br><span class="line">    fwt(a,<span class="number">1</span>);fwt(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) a[i]*=b[i];</span><br><span class="line">    fwt(a,<span class="number">2</span>);</span><br><span class="line">    ll ans=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) ans=min(ans,a[i]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渐渐明白了自己到底想要什么。</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>C++全排列函数</title>
    <url>/2019/08/04/C-%E5%85%A8%E6%8E%92%E5%88%97%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="主角"><a href="#主角" class="headerlink" title="主角"></a>主角</h1><p>C++中的全排列函数很是强大，生成一个长度为$n$的序列的全排列复杂度仅为$O(n)$。</p>
<p>今天总结一下用法。</p>
<h2 id="默认-cmp-规则"><a href="#默认-cmp-规则" class="headerlink" title="默认$cmp$规则"></a>默认$cmp$规则</h2><p>对一个数据有序容器$s$，如下代码便可实现全排列。</p>
<p>为什么必须是有序呢？如果不是有序，$next_permutation$函数便只能生成有序条件下该序列之后的排列。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(s.begin(),s.end());</span><br></pre></td></tr></table></figure>

<h2 id="自定义-cmp-规则"><a href="#自定义-cmp-规则" class="headerlink" title="自定义$cmp$规则"></a>自定义$cmp$规则</h2><p>那么，如果容器内数据的排序规则和正常的排序规则不太一样呢？</p>
<p>不要慌，我们可以自定义排序规则，手写$cmp$。</p>
<p>举个栗子。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">tolower</span>(a)!=<span class="built_in">tolower</span>(b))<span class="comment">//tolower 是将大写字母转化为小写字母.</span></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">tolower</span>(a)&lt;<span class="built_in">tolower</span>(b);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> a&lt;b;</span><br><span class="line">&#125;<span class="comment">//自定义字符比较规则</span></span><br></pre></td></tr></table></figure>

<p>那么在使用$next_permutation$函数的时候，如下方式实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(next_permutation(ch,ch+<span class="built_in">strlen</span>(ch),cmp));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语言</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++STL</tag>
      </tags>
  </entry>
  <entry>
    <title>MACOS更新后提示xcrun: error</title>
    <url>/2021/02/09/MACOS%E6%9B%B4%E6%96%B0%E5%90%8E%E6%8F%90%E7%A4%BAxcrun-error/</url>
    <content><![CDATA[<a id="more"></a>

<p>第一次更新BigSur，在命令行运行gcc出现了xcrun: error: invalid active developer path, missing xcrun的报错。</p>
<p>经搜索，需要重新安装命令行工具Command Line Tools，是因为更新系统时原来的 <strong>Command Line Tools</strong> 被自动卸载了，所以重新安装即可。</p>
<p>在终端中执行如下指令即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<p>Command Line Tools包含的工具很多，如下所示</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ar</span><br><span class="line">as</span><br><span class="line">asa</span><br><span class="line">bison</span><br><span class="line">BuildStrings</span><br><span class="line">c++</span><br><span class="line">c89</span><br><span class="line">c99</span><br><span class="line">cc</span><br><span class="line">clang</span><br><span class="line">clang++</span><br><span class="line">cmpdylib</span><br><span class="line">codesign_allocate</span><br><span class="line">CpMac</span><br><span class="line">cpp</span><br><span class="line">ctags</span><br><span class="line">ctf_insert</span><br><span class="line">DeRez</span><br><span class="line">dsymutil</span><br><span class="line">dwarfdump</span><br><span class="line">dyldinfo</span><br><span class="line">flex</span><br><span class="line">flex++</span><br><span class="line">g++</span><br><span class="line">gatherheaderdoc</span><br><span class="line">gcc</span><br><span class="line">gcov</span><br><span class="line">GetFileInfo</span><br><span class="line">git</span><br><span class="line">git-cvsserver</span><br><span class="line">git-receive-pack</span><br><span class="line">git-shell</span><br><span class="line">git-upload-archive</span><br><span class="line">git-upload-pack</span><br><span class="line">gm4</span><br><span class="line">gnumake</span><br><span class="line">gperf</span><br><span class="line">hdxml2manxml</span><br><span class="line">headerdoc2html</span><br><span class="line">indent</span><br><span class="line">install_name_tool</span><br><span class="line">ld</span><br><span class="line">lex</span><br><span class="line">libtool</span><br><span class="line">lipo</span><br><span class="line">lldb</span><br><span class="line">lorder</span><br><span class="line">m4</span><br><span class="line">make</span><br><span class="line">MergePef</span><br><span class="line">mig</span><br><span class="line">mkdep</span><br><span class="line">MvMac</span><br><span class="line">nasm</span><br><span class="line">ndisasm</span><br><span class="line">nm</span><br><span class="line">nmedit</span><br><span class="line">otool</span><br><span class="line">pagestuff</span><br><span class="line">projectInfo</span><br><span class="line">ranlib</span><br><span class="line">rebase</span><br><span class="line">redo_prebinding</span><br><span class="line">ResMerger</span><br><span class="line">resolveLinks</span><br><span class="line">Rez</span><br><span class="line">RezDet</span><br><span class="line">RezWack</span><br><span class="line">rpcgen</span><br><span class="line">segedit</span><br><span class="line">SetFile</span><br><span class="line">size</span><br><span class="line">SplitForks</span><br><span class="line">strings</span><br><span class="line">strip</span><br><span class="line">svn</span><br><span class="line">svnadmin</span><br><span class="line">svndumpfilter</span><br><span class="line">svnlook</span><br><span class="line">svnrdump</span><br><span class="line">svnserve</span><br><span class="line">svnsync</span><br><span class="line">svnversion</span><br><span class="line">unifdef</span><br><span class="line">unifdefall</span><br><span class="line">UnRezWack</span><br><span class="line">unwinddump</span><br><span class="line">what</span><br><span class="line">xml2man</span><br><span class="line">yacc</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MACOS</category>
      </categories>
      <tags>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyquery 403 Frobidden</title>
    <url>/2021/01/22/Pyquery-403-Frobidden/</url>
    <content><![CDATA[<p>自己电脑没事，别人电脑403Forbidden？来，解决这个问题</p>
<a id="more"></a>

<p>使用Pyquery爬虫时，在自己的Windwos下运行没有问题，但是别人那里爬不到任何信息，而且爬两次就会报错403 Forbidden。</p>
<p>我很是迷惑，因为报错信息是urllib库的内容，而我没有使用urllib库，检查发现，Pyquery库在解析网页时会调用Requests库</p>
<p>这时，学长让我加个Header，感觉是被反爬虫机制干了，我提议先装一个Reuqests库试试，果然，是换了个编译器忘了装Requests库了，而我也加上了Header，问题得到了解决。</p>
<p>附：Agent代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">webBase += str(year) + <span class="string">"-"</span> + str(month) + <span class="string">"-"</span> + str(day) + <span class="string">"/"</span></span><br><span class="line">doc=pq(webBase, encoding=<span class="string">"utf-8"</span>, headers=headers)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>坑点</tag>
      </tags>
  </entry>
  <entry>
    <title>Canada游记</title>
    <url>/2018/08/20/Canada/</url>
    <content><![CDATA[<p>总是要来回忆一下这两周的时光的吧。</p>
<a id="more"></a>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>当时接到通知需要去办护照的时候，心里是非常激动的。心里是不安和激动，而且越接近，越不安，越激动。不过当时没有想过需要做多少准备，但是，哪里有不麻烦的事情呢？准备工作应该是办护照-办签证-团队的一些事情？现在想来其实也就是这几件事情，不过可能在各种事情的轰炸之中，会觉得需要做的事情很多很多吧。不过，填那些乱七八糟的表格，真的是有些难受，这个时候，就需要体现个人强大的学习能力了23333，一味的问别人是没有用的。海外手机卡？电源转换器？方便面（划掉，好像重点准备的就是这几样，然后是一些日用品，倒也不麻烦。中间又回家了两天，来了启程。</p>
<h1 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h1><h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>7.8早上，一行人相聚徐特立图书馆门前，就这样浩浩荡荡去了首都国际机场？坐10号线好漫长啊，和YK，HGF斗了会地主，终于到了还是很漫长的机场线？在机场信号很差的打了一把王者，第一次坐飞机的我也是了解了这么早来机场都做了些什么事儿。在机场其实可以发现许多事情。拿到登机牌后，神奇的发现自己从北京到温哥华的位置靠窗，还想着自己能在空中俯视一下太平洋，解锁空中看海成就，但其实只是想想。飞机一路追着太阳行走，眼看着天快要黑了。可以近距离观察一下星星，突然光亮越来越强，刺眼的光芒让我不得不得拉下窗户，外面的云海是真的很漂亮，一大片一大片。随便看了部电影，时间就过的差不多了。就是一直觉得很热，然而别人都觉得冷（逃。向外面一看，看到的是连绵不绝的冰山，当时真的震撼到了，感觉这边的云都很低，就那样飘在空中，仿佛触手可及，和那样的蓝天比较起来，真的美。</p>
<h2 id="抵达"><a href="#抵达" class="headerlink" title="抵达"></a>抵达</h2><p>飞机降落途中，看到了温哥华的大致情况，几乎没有特别高的楼房，这就是地广人稀的基本素养吧。辗转到了埃德蒙顿，初见热情的Charles和Salta，坐着学校的大巴到了学校，国外的大学没有门，不过真的很大，导致我们后来很好奇他们平时在校园里都靠走么。第一晚跟着国良老师转悠了一个小时，终于找到一个开门的超市23333。这边的宿舍其实挺不错的，不过床太软了，<del>睡不习惯</del>。</p>
<h2 id="在这里"><a href="#在这里" class="headerlink" title="在这里"></a>在这里</h2><p>飞机上没怎么睡觉，晚上一直到了十一点才发现天黑了，一觉睡得天昏地暗，早上大家在找我舍友的时候才发现我不见了2333，被推门而入的那一刻突然睁开双眼。没记错的话，第一天的欢迎早餐挺丰盛的，<del>所以我就理所当然的吃了不少</del>第一天其实主要是破冰，上午做了一些小游戏，对了，那个拿糖，我毫不犹豫的抓了一把，结果最后有点小坑hhh。下午逛了逛校园，其实不太能听懂解说说的，不过人家是真的很热情，校园也很漂亮，如果当时听懂了后面调研可能会容易一些吧我觉得。每天最大的挑战其实是吃什么，一般都是中午去hub吃一顿，早上晚上泡面牛奶面包，不过巧克力牛奶是真的好喝（</p>
<h3 id="日子"><a href="#日子" class="headerlink" title="日子"></a>日子</h3><p>要说这两周都干了什么呢，参观学生自己的实验室，参观义肢实验室，参观阿尔伯塔大学植物园，参观阿尔伯塔省政府，参加街道文化节，埃德蒙顿美食节，两个公园，三节文化体验课，各种各样的讲座，野餐，西贸。这些事情，有的给我感触很深。</p>
<p>带领我们参观学生自己关于航天方面的实验室是一个小姐姐，一看样子就是坚韧的理科生。我感受到的是他们对于自己喜欢的事情的强烈的热情。当我问到他们有老师指导吗，她说一切on their own。其实他们也是本科生，但是可以为了自己感兴趣的东西而努力，想到自己一切都是等着别人拉自己走，真的很惭愧，喜欢，就去做啊，Just Do It。</p>
<p>当时报了参观义肢的实验室，却没想到如此高端。他们研究的其实和图像识别，机器学习都有很大关系，但只是粗略的体验了一下那个可以遥控的假肢，对于原理什么的，真的是听不懂，听力好差啊（</p>
<p>在这里，随处都可以感受到的就是热情，买饭的时候，阿姨会问你从哪里来，和你畅谈许久，公园的导游的热情、逗比让人难以忘怀，把自己藏在一个小隔间里，然后让其他人都沿原路返回，再偷偷冒出头来吓大家一跳。有人说这是他们枯燥的工作生活中的一些调剂，但我觉得这是他们对于自己职业的热爱，所爱干一行爱一行，所谓行行出状元，就是这样的热情才有可能做出点样子来吧。</p>
<p>其实刚开始的时候，感觉自己英语口语太差了，说不出口，不知道和谁交谈，渐渐地，发现，在这样一个环境里，其实是有很多人愿意和你交谈的，不管是身边经过去上课的学生，还是这里的各种各样的老师教授，还是饭店的工作人员，只要你愿意说，他们愿意和你聊，他们愿意故意放慢语速，愿意仔细倾听你说的话。无论什么时候，总是有人和你说一声，Enjoy yourself ，这样的感觉很棒的。一点也不害怕用英语和别人交流了，我想，这应该是我此行最大的收获吧。</p>
<h3 id="心有所感"><a href="#心有所感" class="headerlink" title="心有所感"></a>心有所感</h3><p>谈一谈我对于这个国家的印象。</p>
<p>从前我一直以为加拿大地广人稀，应该是一个生活节奏很慢的地方，但是第一天，温哥华到埃德蒙顿飞机的极速降落，我就有些怀疑自己的判断。可是，还是第一天，这边的饭店，超市之类的下午五点就关门，又让我很疑惑（后来知道因为暑假人比较少）。讲究准时，这确实是的，因为人少，车少，基本上不会堵路，就连公交车都是像国内的地铁一样，有着明确的时间规划，真的没有什么可以迟到的理由。所以他们一切事情都是严格按照既定的时间表来做。飞速的公交车让我再次怀疑自己的观点，但是文化交流课的老师告诉我她觉得Canada’s bus is so slow。我感觉，人少真好，坐公交车都有机会坐出高速的感觉。</p>
<p>这里的天空是真的漂亮，配上低低的云彩，任何人都会为这样一幅画卷痴狂吧。各色各样的建筑，配上天空，配上云彩，都变得如此精彩纷呈。</p>
<p>感觉他们讲究快的时候，可是，在马路上，所有的十字路口，不管有没有红绿灯，司机一定会给你让路，让你先过，本来觉得可能是法律比较严格，人也比较遵纪守法，可是有一天碰到车已经走出一半，看到我们过来，又退了回去，这就让我很不好意思，这种情况下，所有的司机都会热情的和你打招呼，让你先过去，这也是可以感受到的热情，那么，他们到底是不是追求快呢。</p>
<p>这样一个我眼中看似“快节奏”的国家，却有着大片大片的草地，周末外出野餐的人也不在少数，也有着精彩纷呈的街道文化节，街边的酒吧也时常有人。我想，他们想要的应该是生活吧，生活就是无关快慢，总有属于自己的那一种生活方式，生活节奏。</p>
<p>基础设施这一方面，我不想多提，因为现在和他们比这个没有太大实际意义，毕竟难以实现。但是基础设施真心不错，随处可见的直饮水设施，与国内相比很完善的残障保护措施，超大的图书馆等等。等国内资源不紧张了，可以向他们借鉴的。</p>
<p>来谈谈教育吧，这个差别还是很大的。首先他们进入大学是不需要通过高考的，你最终大学在哪里上和你高中所上的一些大学的先修课有关系，这其实给了一个很好的衔接，如此，高中和大学反差太大的情况应该不会出现，大学堕落成谜的情况应该会减少。</p>
<p>再者，他们是纯粹的学分制度。给出必修的学分数目，学生根据自己的需要选择课程来学习，学费也是按所选的科目来计算，但是每年选的课程数量是不受限制的，所以就有很快修完课程的学生，也有学生7年再完成学业，中间则可以做一些自己感兴趣的事情。说到这里，不得不提他们非常正式的学生会，他们的学生会几乎是独立于学校的，有自己产业，主要还是为学生服务，学生会的主要成员还可以在学业上申请缓一段时间，给他们时间搞学生工作，这更能提供一种磨练吧，我觉得和上文提到的断节现象少还是有关系，这样也是社会工作经验的积累吧。说到这儿，我想到了那个担任阿尔伯塔大学研究生会副主席的留学生学长，他想到的是，如果作为中国人，自己没有为自己发声的勇气，能力，又如何指望别人为你发声呢?权利意识真的很重要，有时候不仅仅是为了自己的权利，是一个群体的权利。</p>
<p>上课嘛，因为人少，超过50人的课堂很少，所以老师和学生有更多互动，玩手机的现象可能少一些？不过大家都一样，该翘的课还是会翘的23333。我印象比较深的是他们对于实验类课程的引导性吧，我们的实验课程是老师一股脑给你讲一遍，几乎是傻子式教学，这样子真的又加深了我对于我学这门课有什么用的怀疑。。他们呢，就更注重引导了，老师主要是引出问题，剩下的时间都是学生自己做实验，虽然挑战性较高，但是更能体会到乐趣吧。毕竟是自己手玩出来的东西，直接按老师说的一步一步，有种打游戏看教程的感觉，没什么意思。</p>
<p>嗯，感受还是挺多的？</p>
<p>感受还有最深的地方呢，普天之下，所有机会都是只有一次的，机会再眼前，一定要抓住。同样，要珍惜任何一次机会，也要知道，机会是留给有准备的人的。</p>
<h3 id="难忘的人儿"><a href="#难忘的人儿" class="headerlink" title="难忘的人儿"></a>难忘的人儿</h3><p>更让我难以忘怀是陪我度过这两周的人儿，无论去到哪里，总有连绵不绝的欢声笑语，这就是我所说的：“生活最妙的不过是一群妙人相聚吧”，这注定是一段我永远难以忘怀的记忆，是挤在厨房抢面条的快感吧，是大厅狼人杀的刺激吧，是公园旋转木马的中二吧，是一起在大统华的疯狂吧2333，是都听不懂英文的强颜欢笑吧，是给老师解释green hat的真的皮吧，是一起吐槽饭菜的乐趣吧，是一起yeah的欢愉吧，是一起awesome的畅快吧，是一起cool的希望吧……难忘的事情太多太多，我选择铭记。</p>
<h2 id="离开"><a href="#离开" class="headerlink" title="离开"></a>离开</h2><p>时间过得真快啊，转眼就最后一天了呢。最终展示得到的奖品是绿帽子也是出乎意料，不过知道阿尔伯塔大学很喜欢绿色，绿色象征着森林，友好，反正我们也解释过这个在中国的含义了，也就没什么了吧23333</p>
<p>最后一天吃披萨的时候又和Charles聊了很多，很早就自己一个人来这边留学，所有的苦难，所有的迷惑都经历过，但是只要你自己愿意走出来，总是会有人帮你的。</p>
<p>知道飞机离开了地面，方知自己真的要离开了。</p>
<p>再见，Canada。再见，Alberta。再见，Edmonton。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><blockquote>
<p>Happy is the heart that still feels pain</p>
<p>Darkness drains and light will come again</p>
<p>Swing open your chest and let it in</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>经历</tag>
      </tags>
  </entry>
  <entry>
    <title>【FFT】 HDU 1402 A * B Problem Plus (FFT求高精度乘法)</title>
    <url>/2018/08/13/fft1/</url>
    <content><![CDATA[<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给出A,B两个大数，每个不超过50000位，输出乘积。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>第一眼认为是高精度，但是O(n^2)的复杂度显然会炸。这时候，需要学习一下FFT，最核心的思想是把1-&gt;2-&gt;4-&gt;8…我觉得完全把这个搞懂挺难的，先把板子确定下来。然后做题，再慢慢体会其他核心吧。以及，对压位的操作似乎不是很明白。学习一下。</p>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ol>
<li>FFT的板子</li>
<li>压位一个坑（待填）</li>
<li>重载运算符基本掌握</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000000+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mian main</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(a,b,c) max(a,max(b,c))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> dbg(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> dbg(x) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">10</span>*x+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复数结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex1</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> r,i;</span><br><span class="line">    complex1(<span class="keyword">double</span> _r=<span class="number">0.0</span>,<span class="keyword">double</span> _i=<span class="number">0.0</span>)&#123;</span><br><span class="line">        r=_r;i=_i;</span><br><span class="line">    &#125;</span><br><span class="line">    complex1 <span class="keyword">operator</span> +(<span class="keyword">const</span> complex1 &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> complex1(r+b.r,i+b.i);</span><br><span class="line">    &#125;</span><br><span class="line">    complex1 <span class="keyword">operator</span> -(<span class="keyword">const</span> complex1 &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> complex1(r-b.r,i-b.i);</span><br><span class="line">    &#125;</span><br><span class="line">    complex1 <span class="keyword">operator</span> *(<span class="keyword">const</span> complex1 &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> complex1(r*b.r-i*b.i,r*b.i+i*b.r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//反转变换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(complex1 y[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=len/<span class="number">2</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j) swap(y[i],y[j]);</span><br><span class="line">        k=len/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=k)&#123;</span><br><span class="line">            j-=k;k/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;k) j+=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(complex1 y[],<span class="keyword">int</span> len,<span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    change(y,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">2</span>;h&lt;=len;h&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">complex1 <span class="title">wn</span><span class="params">(<span class="built_in">cos</span>(-on*<span class="number">2</span>*PI/h),<span class="built_in">sin</span>(-on*<span class="number">2</span>*PI/h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=h)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">complex1 <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+h/<span class="number">2</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                complex1 u=y[k];</span><br><span class="line">                complex1 t=w*y[k+h/<span class="number">2</span>];</span><br><span class="line">                y[k]=u+t;</span><br><span class="line">                y[k+h/<span class="number">2</span>]=u-t;</span><br><span class="line">                w=w*wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on==<span class="number">-1</span>) </span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">       y[i].r/=len;</span><br><span class="line">&#125;</span><br><span class="line">complex1 x1[maxn],x2[maxn];</span><br><span class="line"><span class="keyword">char</span> str1[maxn/<span class="number">2</span>],str2[maxn/<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,str1,str2)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len1=<span class="built_in">strlen</span>(str1),len2=<span class="built_in">strlen</span>(str2);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;len1*<span class="number">2</span>||len&lt;len2*<span class="number">2</span>) len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;++i) </span><br><span class="line">            x1[i]=complex1(str1[len1-i<span class="number">-1</span>]-<span class="string">'0'</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len1;i&lt;len;++i) </span><br><span class="line">            x1[i]=complex1(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len2;++i)</span><br><span class="line">            x2[i]=complex1(str2[len2<span class="number">-1</span>-i]-<span class="string">'0'</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len2;i&lt;len;++i)</span><br><span class="line">            x2[i]=complex1(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        fft(x1,len,<span class="number">1</span>);</span><br><span class="line">        fft(x2,len,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) </span><br><span class="line">            x1[i]=x1[i]*x2[i];</span><br><span class="line">        fft(x1,len,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">         sum[i]=(<span class="keyword">int</span>)(x1[i].r+<span class="number">0.5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[i+<span class="number">1</span>]+=sum[i]/<span class="number">10</span>;</span><br><span class="line">            sum[i]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        len=len1+len2<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum[len]&lt;=<span class="number">0</span>&amp;&amp;len&gt;<span class="number">0</span>) len--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,sum[i]+<span class="string">'0'</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>HDU</category>
      </categories>
      <tags>
        <tag>FFT</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb使用小结</title>
    <url>/2019/08/28/gdb%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>妈妈再也不用担心我离开$IDE$就不会敲代码啦！</p>
<p>对于$gdb$功能的基础介绍</p>
<ul>
<li>设置断点</li>
<li>逐行执行代码</li>
<li>查看变量的值</li>
</ul>
<h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><p>首先我们在$gcc$程序的时候需要添加$-g$选项</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本文仍以test.c为例</span></span><br><span class="line">gcc -g test.c -o test</span><br></pre></td></tr></table></figure>

<p>此时生成的$test$便可通过$gdb$调试辣！</p>
<p>我们执行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">gdb test</span><br></pre></td></tr></table></figure>

<p>会发现出现了多行信息，只需要添加$-q$，世界会瞬间变得清净起来。</p>
<p>踏入了$gdb$的世界，下面让我们来具体学习一下操作吧！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file 文件名 //装载文件，如果是直接gdb进入而没有附加文件，则调试前需要装载文件</span><br><span class="line">list begin,end  //展示从begin行到end行的代码，若没加行数限制则默认每次展示10行，回车继续展示</span><br><span class="line">b(reak) num //在num行设置断点</span><br><span class="line">b(reak) 文件名:函数名</span><br><span class="line">r(un)  //运行</span><br><span class="line">p(rint) var //输出变量的值</span><br><span class="line">c(ontinue) //继续执行</span><br><span class="line">n(ext) //下一行</span><br><span class="line">s(tep) //下一行，与next区别为会进入函数内部</span><br><span class="line">set var=   //修改变量值</span><br><span class="line">breakpoints //查看断点</span><br><span class="line">disable num//使第num行的断点失效</span><br><span class="line">enable num //使第num行的断点生效</span><br><span class="line">delete num//删除num行的断点</span><br><span class="line">delete //删除所有断点</span><br><span class="line">kill //停止当前进程</span><br><span class="line">q(uit) //退出gdb</span><br></pre></td></tr></table></figure>

<p>上面便是我们常用的$gdb$的基本操作辣！</p>
<p>你是不是还有一个疑问呢？如果发生段错误（内存错误）我们怎么知道是哪里出了问题呢？</p>
<p>这就涉及到一个新的知识点。</p>
<h3 id="利用-gdb-和-core-dump-快速定位段错误"><a href="#利用-gdb-和-core-dump-快速定位段错误" class="headerlink" title="利用$gdb$和$core dump$快速定位段错误"></a>利用$gdb$和$core dump$快速定位段错误</h3><p>内存错误的程序通常会崩溃掉，即$coredum$（核心转储），这时候会有一个镜像文件留存下来，即$core$，我们可以从其中找到内存错误的代码片段。</p>
<p>比如这段错误的代码。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *s;</span><br><span class="line">	gets(s);</span><br><span class="line">	<span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后，结果为</p>
<p>去同目录下找$core$文件，可能会找不到，因为默认空间设置为0，我们给空间设置为1000。</p>
<p>即执行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ulimit -c <span class="number">1000</span></span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">gdb -q err core</span><br></pre></td></tr></table></figure>

<p>会得到</p>
<p>我们通过$bt$命令便可以查看错误的点的信息（具体行数）</p>
<p>如图所示</p>
<p>以上。</p>
]]></content>
      <categories>
        <category>语言</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>学一学</tag>
        <tag>小学期</tag>
      </tags>
  </entry>
  <entry>
    <title>MACOS配置终端代理</title>
    <url>/2021/03/05/MACOS%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<a id="more"></a>

<p>在<code>~/.zshrc</code> 中添加如下内容（如果是是<code>bash</code>用户那么配置文件为<code>~/.bash_profile</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为终端设置代理</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">'export all_proxy=socks5://127.0.0.1:1080'</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">'unset all_proxy'</span></span><br></pre></td></tr></table></figure>

<p>修改完成后<code>source</code>对应的文件即可</p>
<p>其中，<code>1080</code>为端口号，需要和自己的代理软件的设置保持一致。</p>
<p>这样在终端中使用<code>proxy</code>命令就可以打开代理，使用<code>unproxy</code>就可以关闭代理。</p>
<p>效果如图</p>
<p><a href="https://imgtu.com/i/6JUgqU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/10/6JUgqU.png" alt="6JUgqU.png"></a></p>
]]></content>
      <categories>
        <category>MACOS</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>gcc编译命令与makefile总结</title>
    <url>/2019/08/28/gcc%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>今天学习了$gcc$的基本指令，之前总是望而却步，今天一口气。</p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>我们知道，$gcc$在编译$C$语言或者$C++$时，分为四个步骤。</p>
<ul>
<li>预处理 替换头文件和宏，移除注释（.i文件）</li>
<li>编译，生成汇编代码 (.s文件)</li>
<li>汇编 生成目标文件（机器码 .o文件）</li>
<li>链接 生成可执行文件<h3 id="编译命令"><a href="#编译命令" class="headerlink" title="编译命令"></a>编译命令</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//以下均以test.c为例</span><br><span class="line">gcc test.c //此行代码会直接生成可执行文件，并默认保存为a.out</span><br><span class="line">gcc test.c -o  test.o //-0指令表示生成文件命名为-o后的名字，若无其他指令则与后缀无关，都是可执行文件</span><br><span class="line">//关于-o，以下几种需要-o重定向输出文件</span><br><span class="line">gcc -S test.c//只处理预处理和编译 生成汇编代码</span><br><span class="line">gcc -E test.c //只预处理</span><br><span class="line">gcc -c test.c //只有预处理、编译、汇编三步，生成obj(.o)文件</span><br><span class="line">gcc -I 路径 test.c //所调用的头文件所涉及的路径</span><br><span class="line">gcc -Dmarco test.c //宏定义</span><br><span class="line">gcc -Dmarc=def test.c//宏定义</span><br><span class="line">gcc -g test.c//编译时，生成调试信息，常常与gdb配合使用</span><br><span class="line">gcc -std=c9//指定语言标准</span><br><span class="line">gcc -On(0-3) //开启编译优化选项，一般使用-O2</span><br></pre></td></tr></table></figure>

<h3 id="大明星：-makelist"><a href="#大明星：-makelist" class="headerlink" title="大明星：$makelist$"></a>大明星：$makelist$</h3><p>怎么样？看了上面的编译命令，是不是觉得原来也不过如此？</p>
<p>但是想一下，如果我们需要编译链接许多文件呢？有没有什么简便的方式呢？</p>
<p>这个时候，$makefile$就要闪耀登场了！</p>
<p>什么是$makefile$？之前用$windows$我从来没见过，因为强大的/一般的$IDE$已经为我们做好了一切事情。</p>
<p>$makefile$其实可以简单理解为指令的集合，是对指定的一些文件进行编译的指令，如果我们一个个写出来会很耗费时间，但是$makelist$可以让我们通过简单的$make$，实现相同的功能。</p>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">目标文件：[依赖文件集合]</span><br><span class="line">	指令                    <span class="comment">//注意：此处开头必须打tab！</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line">main:test.o <span class="keyword">delete</span>.o add.o</span><br><span class="line">	gcc $^ -o $@</span><br><span class="line">test.o:test.c</span><br><span class="line">	gcc -c test.c -o test.o</span><br><span class="line">add.o:add.c</span><br><span class="line">	gcc -c add.c -o add.o</span><br><span class="line"><span class="keyword">delete</span>.o:<span class="keyword">delete</span>.c</span><br><span class="line">	gcc -c <span class="keyword">delete</span>.c -o <span class="keyword">delete</span>.o</span><br></pre></td></tr></table></figure>

<p>上面只是3个文件，需要一行一行写出来，如果有1000个需要处理的文件呢？还要一行一行写出来未免效率也太低了。这个时候，$makefile$的扩展用法就要登场了。</p>
<h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><h5 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">$&lt; 代表第一个依赖文件的名称</span><br><span class="line"></span><br><span class="line">$@ 代表目标文件的名称</span><br><span class="line"></span><br><span class="line">$^  代表所有依赖文件的名称</span><br></pre></td></tr></table></figure>

<p>此外还可以自己定义一些变量。</p>
<h5 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -I ../include </span><br><span class="line"><span class="comment">//注意等号左右两边都需要有空格</span></span><br></pre></td></tr></table></figure>

<p>举个例子，上面代码可改为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CC = gcc</span><br><span class="line">main:test.o <span class="keyword">delete</span>.o add.o</span><br><span class="line">	$(CC) $^ -o $@</span><br></pre></td></tr></table></figure>

<h4 id="隐含规则"><a href="#隐含规则" class="headerlink" title="隐含规则"></a>隐含规则</h4><h5 id="模式规则"><a href="#模式规则" class="headerlink" title="模式规则"></a>模式规则</h5><p>将一个带有某种后缀的文件转换为另一种后缀的文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.c.o:</span><br><span class="line">	$(CC) $(CCFLAGS) -c -o $@ $&lt;</span><br></pre></td></tr></table></figure>

<h5 id="后缀规则"><a href="#后缀规则" class="headerlink" title="后缀规则"></a>后缀规则</h5><p>冒号后为依赖文件，冒号前为目标文件</p>
<h3 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%.o:%.c(若有多个依赖文件则多写几个%)</span><br><span class="line">	$(CC) $(CCFLAGS) -c -o $@ $&lt;</span><br></pre></td></tr></table></figure>

<p>综合以上规则，$makefile$文件可写为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CC = gcc</span><br><span class="line">main:test.o <span class="keyword">delete</span>.o add.o</span><br><span class="line">	$(CC) $^ -o $@</span><br><span class="line">.c.o:</span><br><span class="line">	$(CC) -c $&lt; -o $@</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语言</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>学一学</tag>
        <tag>小学期</tag>
      </tags>
  </entry>
  <entry>
    <title>个人书单</title>
    <url>/2021/02/06/%E4%B8%AA%E4%BA%BA%E4%B9%A6%E5%8D%95/</url>
    <content><![CDATA[<a id="more"></a>

]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>回首2020</title>
    <url>/2021/01/07/%E5%9B%9E%E9%A6%962020/</url>
    <content><![CDATA[<p>荒诞却又值得纪念的2020。</p>
<a id="more"></a>

<p>2020年初，我还在欢乐地带着玉米接待sjy和wsy，那几天真的好快乐喔，尽管sjy这个闷骚的家伙在玉米在的时候就能憋着不说话，晚上回去又属他话多，但还是真的好快乐，记得和他们在大学城北站告别的时候，我在回学校的路上一直在想，为什么无比欢乐的时光总是这么短暂呢？不由想起来，两年前清明节他们俩来找我，结果wsy因为要上军理先溜了，sjy因为要回去数学建模培训也先溜了，那个时候就在想，无忧无虑的时光早已一去不复返了，我们身上都已经背上了一份份责任，对自己，对别人。</p>
<p>快乐有在变少吗？其实也未必，只是我们获得快乐越来越难了。生活中也许还有百般简单的快乐，但是真正的大快乐在于我们一直担心的事情有了好结果那一瞬间，那一个如释重负的瞬间，或许是在阳光微醺的午后，或许是在星空寂语的深夜，一天中的时时刻刻，都可能会带给我们惊喜。每个接到惊喜的人，怎么能抑制住心中的兴奋呢？所以，其实我们快乐的能力并没有丧失，只是我们获得快乐越来越难了。</p>
<p>这怎么就扯远了呢。</p>
<p>软测考试是元旦之前还是之后我都记不清了，只是依稀记得有一个1.4的考试，那应该就是了吧。那这里不得不提前说一下之后的软测大作业，真的离谱，让我们自己爬代码，写自动化测试程序，测试java7和java8的输入、形式都相同，但是结果不同的API。。虽然这门课最后得分还挺好的，但是写大作业的那几天想做点东西却不知道做什么的无力感是真的难受。</p>
<p>时间来到了每年年前期末的生病阶段，肠胃型感冒，一晚上起来七八次，校医院医生只是直说赶紧转诊急救去，别来找我。生病并不可怕，可怕的是几天之后考试。那几天也几乎没怎么复习，在床上躺尸。不过那几天每天喝粥，吃自己和玉米整的一大堆药，还是挺印象深刻的。考完试搞了几天软测的大作业就回家了，回家当天是生日，回家前一天和玉米在图书馆提前过了一个生日，吃了一个可可爱爱的小蛋糕，火车上了度过了一天，晚上回去又吃了一个大大的大蛋糕，吃了两个蛋糕还是蛮开心的。</p>
<p>生活总是这么有趣。</p>
<p>而之后的日子却一天天灰暗了起来。</p>
<p>某天清晨惊醒看到的科比去世的消息消息，一天天增长的疫情人数，惶惶终日。其实也猜到了开不了学，但是没想到这开不了学的日子一直持续到了9月。在家的日子谈不上索然无味，就是总少了点东西，这里折腾两天，那里折腾两天，不是很如意。而生活也好像喜欢和我开玩笑，上半年光快递就丢了4次，买本旧书还折腾了好多天，电脑还三天两头出问题，课程的作业一天天的堆积着，本来说着复习考研，可是在家的低效率，计网的一堆堆作业，编译原理每周让我焦头烂额的实验，以及家里的一些事情，生活突然就变得不那么有期待了……不过也好在我还是熬过来了，并且完成的还不错。整个暑假其实还是比较扯的，虽然还是完成了些东西，但现在看来我对这个暑假是极其不满意的，但是已经过去了，大概是7月还处于焦虑不安的时期，进了8月就开始每天想着开学了吧，安不下心来。</p>
<p>8.29抵达北京，阔别良久的良乡，却要在31号就搬离，玉米30号到，晚上见了从1.15以来的第一面，真是难忘的一年啊，这么难都熬过来了，还有什么害怕的呢？未来可期～收拾宿舍发现自己真是一个怀旧的人啊，太多太多的东西都舍不得扔，导致最后我的行李是比别人多一些。当断则断，还是扔了不少东西的，以及好像不小心把自己的录取通知书等等资料给弄丢了……记得当时告诉自己，这是要给你发一个新的录取通知书呢，好兆头。可能确实人在最无助的时候就会turn to 老天爷吧，总把一些东西当成老天爷的馈赠。搬到村里后，地方是真的小啊，慢慢倒是也习惯了，刚开学那会儿每天就想着往良乡跑，确实学不进去，就这我还以为来了学校生活的旋律就慢慢到学习上来了。小学期开始后，生活确实转移到学习上来了，但是我却发现自己没有时间学习考研的东西……每天忙于造CPU，大家都说大四了水一水水一水，可是一个个的还是牟足了劲的做，可能是习惯了把作业完成的很好吧，虽然确实划水了，但是还是用了很大的力气去完成这个作业，以为大四的小学期不用熬夜了，可是还是每天熬夜到一两点；顺便顺便，以为小学期结束就不用熬夜了，可是考研期间其实也是一两点才睡，小学期终于结束了，也就10月了，以为生活的重心终于要转移到考研上来了，不过也确实，中间因为入党材料的事情耽搁了加起来几天的时间吧，不过这件事情好在最后有了好结果。</p>
<p>十一期间也没怎么学习，十一之后好像才慢慢有了学习的状态吧，那个时候学习还不是很苦，每天7点多点起来，吃个饭就去图书馆学习，晚上学到10.30回来，每天看上去游刃有余，其实看到别人的进度，自己心里还是很慌的，自己确实进度慢慢，也不知道怎么就进入了资料收集的大误区，每天沉迷于收集资料，把自己的百度网盘塞的满满的，各种pdf层出不穷，却没有细看其中哪怕就一份。</p>
<p>10.31玉米21岁生日生日，本来想着去故宫，吃海底捞完美规划，谁知道地铁上手机被狗东西给偷了，于是去派出所做了一上午笔录笔录，虽然也根本找不回来，可是对于丢手机这个流程，是很熟悉了，该冻结什么，改什么密码，也进一步提醒了自己备份的重要性，还好之前大部分照片都备份了，就是损失了手机，用了两年1个月，结果换了个新手机，是该高兴高兴，还是该哭泣呢？不知道……:( 反正，我自己的资金–了</p>
<p>11月就这样悄无声息的来临了，还是按部就班的学习，每天给自己打打气，到了到了11月中旬吧，发现大家都开始找导师找毕设了，惊觉与导师的重要性，我觉得找个好导师比较重要，四处打听，其实也没打听到什么，大家好像都不怎么了解，想着要不找那个很push的老师算了，想起来pyq还有一个老师，但是感觉这个老师好厉害，估计保研的都招满了吧，不管了，先试一下，抱着试一试的态度我问了老师招不招考研的学生，没想到老师回复了我招。然后在玉米的教导下，我给老师发了我的基本信息，并表明了我想跟着老师做毕设，以后也想读老师的研究生，老师秒回，欢迎欢迎。然后老师让我去找她聊聊，这一聊，就从不到一点聊到了两点，虽然外卖凉了，但是心里好踏实，我告诉自己我告诉自己，又多了一条上岸的理由。之后老师的种种言行举止都让我觉得自己好幸运，当然我要是考上的话，那我真的好幸运。</p>
<p>进入进入12月后，开始变得焦虑起来，时间越来越短，而感觉自己的复习毫无进展，简单来说，就是感觉自己啥都不会，唉，现在我还是忘不了那二十多天的煎熬，疲惫的身体已经不支持7点多起来了，而身体问题频出，晚上焦虑的睡不着觉，头疼，不过我还是坚持了下来，坚持学习。12月初其实还好，每天都在做数学卷子赶进度，大概是六级之后，十五天左右，我的眼睛开始废了，每天眼睛肿胀睁不开，而压力也真的好大，自己一个人坐在一楼的沙发那里，看着书，看着看着头就炸掉了，眼泪止不住的往下流，但是我告诉自己千万不能放弃，都坚持到这里了，走下去，一定要走下去，现在想起来，我都忘不了那最后15天昏暗的日子。理了个发，去了趟校医院，医生很温柔，让我注意用眼，坚持下去，眼睛满满的好了，后脑勺又出了一个大疙瘩，根本不能抬头，觉得自己真是倒霉啊那会儿，不过现在都过去了就看起来觉得没什么了。</p>
<p>最后一周，王晗喊我调整作息，于是每天中午回去午睡，结果没有一天是考试时间起来的。。。不过也保证了身体不会再出现什么问题了，休息好比什么都强强。</p>
<p>考试前，心情却异常的平静，也不是有多平静，就是这两天一直在积极调整自己的心态，所以从发挥上来看，是没有太大的问题的，数学也算是尽力了吧，粗心的分数不会太多，能拿多少分全看老师大题怎么给分，好了好了，不说这些，总之这一年就这样以考试结束了，果然，结束的时候并不会有什么仪式感，平淡的像什么都没发生什么都没发生。一切都挺好都挺好。</p>
<p>感谢一直陪伴着我的人儿，自己一个人真的顶不住的，有一群和你每天哈哈哈哈的人不容易，有一个永远陪着你听你诉说的人不容易，这样看来，我还真是幸运的！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>关于字符串处理的整理</title>
    <url>/2019/08/22/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E7%9A%84%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>字符串是我们经常要处理的东西，今天在处理方面比如读入处理等方面做一个小小的总结。</p>
<h3 id="读字符串之前"><a href="#读字符串之前" class="headerlink" title="读字符串之前"></a>读字符串之前</h3><p>如果读字符串之前有读入数的操作，那么需要把其后的换行符给读入消去，$getchar()$即可。</p>
<h3 id="整行读入字符串的方式"><a href="#整行读入字符串的方式" class="headerlink" title="整行读入字符串的方式"></a>整行读入字符串的方式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++标准string</span></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="comment">//char字符数组</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n]%*c"</span>,s);</span><br><span class="line">gets(s);</span><br><span class="line"><span class="built_in">cin</span>.get(s,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">cin</span>.getline(s,<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h4 id="整行读入原理解释"><a href="#整行读入原理解释" class="headerlink" title="整行读入原理解释"></a>整行读入原理解释</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n]%*c"</span>,s);</span><br></pre></td></tr></table></figure>

<p>​    $%[\qquad ]$是很有趣的参数，意义是读入一个字符集合，一旦遇到不在集合中的就停止，同时遇到^后面的字符也会停止，所以^\n就是遇到换行符停止，后面的%*c是为了把换行符读入，防止影响接下来的读入。</p>
<h3 id="cin-get-和cin-getline-之区别"><a href="#cin-get-和cin-getline-之区别" class="headerlink" title="cin.get()和cin.getline()之区别"></a>cin.get()和cin.getline()之区别</h3><p>两者都是只支持$char*$字符数组。</p>
<p>我们知道读入时存在缓冲区这一说法，比如$cin$，在键盘输入结束后，将数据存入缓冲区m$cin$函数直接从缓冲区读取数据，所以如果缓冲区有残留数据，$cin$会直接读取。</p>
<p>问题的关键在于，$cin.get$()在一次输入结束后不会删除缓冲区的结束符，而$cin.getline$()会自动丢弃缓冲区字符。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cin</span>.get(数组名，长度，结束符);</span><br><span class="line"><span class="built_in">cin</span>.getline(数组名，长度，结束符);</span><br><span class="line"><span class="comment">//其中，结束符默认为换行符</span></span><br></pre></td></tr></table></figure>

<p>如果要用$cin.get()$读入多组数据，需要写成 $cin.get(数组名，长度).get()$。</p>
]]></content>
      <categories>
        <category>语言</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>整理</tag>
      </tags>
  </entry>
  <entry>
    <title>子区间异或和</title>
    <url>/2018/08/18/%E5%AD%90%E5%8C%BA%E9%97%B4%E5%BC%82%E6%88%96%E5%92%8C/</url>
    <content><![CDATA[<p>异或，二进制，真有趣啊。</p>
<a id="more"></a>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>rating赛的一道二进制题。比赛的时候瞎搞过了，还是记录一下思路。那个时候好菜啊。</p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给出n个数（n&lt;=1e5），求出这n个数任意子区间的异或值的和。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>之前提过，异或这个东西具有非常优良的性质。对于任意子区间[i,j]，如果我们预处理出异或前缀和pre[]数组，显然i到j的异或值为pre[j]^pre[i-1]。但是得到这个还是不够，1e5的数据O(n^2)是不行的。那么我们考虑按位来计算贡献，1e9的二进制位数不会超过30，对于每一位都计算贡献，显然时间复杂度较低。<br>如何按位计算？我们知道，对于pre[j]^pre[i-1]，只有pre[j]和pre[i-1]的第k位不同时，他们的第k位才会做贡献，那么我们可以固定子区间的右端点r，计算对于每一个r，每一个k，之前的有多少个在第k位和r不一样，这个计算会不会工作量很大呢？不会，假设我们已经知道r时候的情况，那么r+1和r是只区别在r+1这一位的，如果r+1这一位是0，就给做贡献的位数+前面第k位是1的数目，反之，+前面第k位是0的数目。最后2^k*（做贡献的位数）即可，便可得到最终答案。</p>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>异或真的是有优良性质，觉得异或的前缀和应该是一个比较常用的工具。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000000+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mian main</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || ch&gt;<span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span>&amp;&amp;ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Out</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a&gt;<span class="number">9</span>)</span><br><span class="line">		Out(a / <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(a % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;  </span><br><span class="line">ll a[maxn],x[maxn],ans1;   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=read();  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);  </span><br><span class="line">        x[i]=x[i<span class="number">-1</span>]^a[i];   </span><br><span class="line">    &#125;     </span><br><span class="line">    ans1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;<span class="number">30</span>;++k)&#123;  </span><br><span class="line">        ll cnt[<span class="number">2</span>]=&#123;&#125;,tmp=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=n;i++)&#123;  </span><br><span class="line">            tmp+=cnt[((x[i]&gt;&gt;k)&amp;<span class="number">1</span>)^<span class="number">1</span>];  </span><br><span class="line">            ++cnt[(x[i]&gt;&gt;k)&amp;<span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        ans1+=<span class="number">1L</span>L*(<span class="number">1</span>&lt;&lt;k)*tmp;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>异或</tag>
        <tag>按位算贡献</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验二进程控制</title>
    <url>/2019/11/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="操作系统课程设计实验二-进程控制"><a href="#操作系统课程设计实验二-进程控制" class="headerlink" title="操作系统课程设计实验二 进程控制"></a>操作系统课程设计实验二 进程控制</h2><h3 id="一些基本的东西"><a href="#一些基本的东西" class="headerlink" title="一些基本的东西"></a>一些基本的东西</h3><h5 id="C语言获取系统时间的函数"><a href="#C语言获取系统时间的函数" class="headerlink" title="C语言获取系统时间的函数"></a>C语言获取系统时间的函数</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gettimeofday</span><span class="params">(struct  timeval*tv,struct  timezone *tz )</span></span></span><br><span class="line"><span class="function"><span class="comment">//其中，时间会返回到结构体tv中，tv的结构如下</span></span></span><br><span class="line"><span class="function">    struct  timeval</span>&#123;</span><br><span class="line">       <span class="keyword">long</span>  tv_sec;<span class="comment">/*秒*/</span></span><br><span class="line">       <span class="keyword">long</span>  tv_usec;<span class="comment">/*微妙*/</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="comment">//同时，timezone为当前时区的信息，一般第二个参数置为NULL，结构体如下。</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timezone</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> tz_minuteswest;<span class="comment">//和greenwich时间差的分钟数</span></span><br><span class="line">        <span class="keyword">int</span> tz_dsttime;<span class="comment">//夏令时校正</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="Linux系统编程wait-函数"><a href="#Linux系统编程wait-函数" class="headerlink" title="Linux系统编程wait()函数"></a>Linux系统编程wait()函数</h5><p> wait()函数用于使父进程（也就是调用wait()的进程）阻塞，直到一个子进程结束或者该进程接收到了一个指定的信号为止。如果该父进程没有子进程或者它的子进程已经结束，则wait()函数就会立即返回。 </p>
<h5 id="Windows进程相关结构体-STARTUPINFO"><a href="#Windows进程相关结构体-STARTUPINFO" class="headerlink" title="Windows进程相关结构体 STARTUPINFO"></a>Windows进程相关结构体 STARTUPINFO</h5><p> 用于指定新进程的主窗口特性的一个结构。 </p>
<p>没有太明白。。</p>
]]></content>
      <categories>
        <category>课程</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>【提提醒】</title>
    <url>/2018/08/18/%E6%8F%90%E6%8F%90%E9%86%92/</url>
    <content><![CDATA[<h1 id="TLE"><a href="#TLE" class="headerlink" title="TLE"></a>TLE</h1><ol>
<li>是不是写了死循环</li>
</ol>
<h1 id="MLE"><a href="#MLE" class="headerlink" title="MLE"></a>MLE</h1><ol>
<li>是不是没有清空队列</li>
</ol>
<h1 id="WA"><a href="#WA" class="headerlink" title="WA"></a>WA</h1><ol>
<li>是不是写多组用例了</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>坑点</tag>
      </tags>
  </entry>
  <entry>
    <title>some flags</title>
    <url>/2018/08/29/%E6%96%B0%E5%AD%A6%E6%9C%9F/</url>
    <content><![CDATA[<p>Promise to myself.</p>
<a id="more"></a>
<h1 id="life"><a href="#life" class="headerlink" title="life"></a>life</h1><ul>
<li>责任</li>
<li>勇气</li>
<li>自律</li>
<li>勤快<h1 id="study"><a href="#study" class="headerlink" title="study"></a>study</h1></li>
<li>网络相关</li>
<li>算法</li>
<li>网页制作</li>
<li>操作系统</li>
<li>课程</li>
</ul>
<p><img src="https://gitee.com/gugumelon/ownpic/raw/master/img/20200707111315.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>对过去以及未来学习的一些思考</title>
    <url>/2020/07/07/%E5%AF%B9%E8%BF%87%E5%8E%BB%E4%BB%A5%E5%8F%8A%E6%9C%AA%E6%9D%A5%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83-md/</url>
    <content><![CDATA[<p>近来突然意识到自己快要步入社会了，学习确实是一件终身的事情啊。</p>
<a id="more"></a>

<p>大学三年的时光一眨眼就过去了，要说遗憾，感觉还是有的……但是毕竟都过去了，嘛，所以就总结一下，继续向前吧。</p>
<h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><p>过去的这么多年，似乎学习一直是为了考试，大学以前不必说，小城市没有太多的娱乐活动，也没有老师会教你某一门课背后蕴含的无穷奥妙，有的只是小考、中考、高考。喜欢某一门课？不排除有的朋友真的是从枯燥的应试教育背后发现某门学科的真正含义，比如有些同学对于英语、语文的热爱是真的可以上升到语言、文学层次的，这样的热爱足以支撑枯燥的应试时光。那么其他科目呢，其实刷题把这门课刷高是没有灵魂的，比如我现在慢慢意识到自己对于历史、地理都是很喜欢的，也就对政治一门不是太感兴趣，因为感觉要背的东西太多了，但是就本人而言，还是对政治方面的东西很感兴趣的（确信！）。那为什么当初不选择文科冲一冲某校呢，可能一方面是自己内心不太愿意去做这个决定，另一方面是自己当时对计算机比较感兴趣吧。好吧，上面有些扯远了，我想说的其实就是应试教育似乎也吞噬了我的大学三年，这真的是一件很可怕的事情啊。似乎对很多课失去了兴趣，而是单纯的等考试前看一看，这也造成了一次滑铁卢啊。但是也正是从那时候开始，似乎对学习更加上心了，虽然不如大佬们对待学习的热情，但是在作业层次还是尽心尽力的。但是啊，还是以分数为导向，我觉得不算好好学习。</p>
<p>这几天看dl的博客，发现了一句个人认为很有价值的话。</p>
<blockquote>
<p>大学课程同之前的课程一样，具备课程的基本属性：给你继续自由探索的勇气和能力。也就是说，课程的结束只是起点而已。</p>
</blockquote>
<p>所以，大学的课程，并不是这学期学完就结束了，并不是老师教你的东西就是全部，更广阔的世界是需要自己去探索的，这一个过程会耗费大量的时间，会让你娱乐的时间变少，但是确实是值得的啊。可惜我明白的太迟了。浪费了大量的时间。</p>
<p>所以，从现在开始，学习对我来说意义发生了变化，学习不是你获取高分的工具，学习是自己不断探索的过程，不断成长，学习不能停啊！！</p>
<h2 id="关于知识管理"><a href="#关于知识管理" class="headerlink" title="关于知识管理"></a>关于知识管理</h2><p>还是学习方面，自己从前的学习其实是没有层次的，学了就忘，mark的东西都是积灰，小孩子这样子可以，但是一个成年人是不是需要拥有一个属于自己的知识体系呢？其实也可以说是自己的生活轨迹。</p>
<p>斟酌再三，我选用了notion这款软件，page可以任意嵌套，block可以任意排列，这确实是一个理想的人生轨迹软件。</p>
<p>不出意外的话，日后的学习记录，精彩mark我会保存在notion中。</p>
<p>说起来就想多说点，考研复习真的是一个体力活，用了一天刷了定积分17个视频，把我恶心到接下来一天半都没怎么复习，持续摸鱼，当然也可能是我给自己的懒找借口吧……保持状态真的特别重要啊！！一定要坐一会起来站站走走！！每天出去走路也是必备的！冲！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>毕设代码阅读笔记</title>
    <url>/2021/04/14/%E6%AF%95%E8%AE%BE%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>第一次阅读Pytorch代码。</p>
<a id="more"></a>]]></content>
      <categories>
        <category>语言</category>
        <category>代码阅读</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Pytorch</tag>
        <tag>毕设</tag>
      </tags>
  </entry>
  <entry>
    <title>引用参数与形参区别</title>
    <url>/2021/02/04/%E5%BC%95%E7%94%A8%E5%8F%82%E6%95%B0%E4%B8%8E%E5%BD%A2%E5%8F%82%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>发现引用传值真的要快很多。</p>
<a id="more"></a>

<p>在函数进行参数传递时，如果采用形式参数传递，则需要进行拷贝，将会有额外的时间和空间的开销，而使用引用类型传递，因为自始自终使用的都是一个东西，只是起了几个名字而已，所以就没有额外的开销，时间和空间上都有不小的提升。</p>
<p>引用传递本质是指针，对于基本数据类型 ，引用传递和非引用基本没有区别（基本类型复制较快）， 而对于<strong>容器</strong>或者<strong>自定义类型</strong> 复制成本非常高（因为这里会调用 拷贝构造函数，具体是深拷贝还是浅拷贝，需要取决于你是否重写拷贝构造函数）</p>
]]></content>
      <categories>
        <category>语言</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>坑点</tag>
      </tags>
  </entry>
  <entry>
    <title>编程经验</title>
    <url>/2018/08/28/%E7%BB%8F%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><p>数组作为变量传递时会丢失长度信息</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>数学结论</title>
    <url>/2021/02/04/%E6%95%B0%E5%AD%A6%E7%BB%93%E8%AE%BA/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="均值不等式"><a href="#均值不等式" class="headerlink" title="均值不等式"></a>均值不等式</h2><p><a href="https://zhuanlan.zhihu.com/p/58362884" target="_blank" rel="noopener">均值不等式证明</a></p>
<h3 id="整数拆分问题"><a href="#整数拆分问题" class="headerlink" title="整数拆分问题"></a>整数拆分问题</h3><p>即将一个数$ $拆分为$k$个数，使得$k$个数乘积最大。</p>
<p>由均值不等式易得$k$个数相等时 乘积是最大的，那么这$k$个数应该等于多少呢？</p>
<p>即求$f(x)=x^{\left(\frac{n}{x}\right)}$的最大值</p>
<p>$f(x)=x^{\left(\frac{n}{x}\right)}=e^{\frac{n}{x} \ln x}$</p>
<p>易得$h(x)=\frac{1}{x} \ln x$ 与$f(x)$有相同的单调性</p>
<p>$h^{\prime}(x)=\frac{1-\ln x}{x^{2}}$</p>
<p>可知，x=e时，$f(x)$取得最大值，由于2不是整数，所以可以是2或3.</p>
<p>则将$n$拆分为尽量多的3以及少量2即可。</p>
<p>总结可得</p>
<p><img src="https://i.loli.net/2021/02/06/K5jFsLWkHzJ7tgx.png" alt="image.png"></p>
<h2 id="线性代数性质"><a href="#线性代数性质" class="headerlink" title="线性代数性质"></a>线性代数性质</h2><p>$$<br>\operatorname{tr}(A B)=\operatorname{tr}(B A)<br>$$</p>
<p>证明：<br>$$<br>\operatorname{tr}(A B)=\sum_{i=1}^{m}(A B)<em>{i i}=\sum</em>{i=1}^{m} \sum_{j=1}^{n} a_{i j} b_{j i}=\sum_{i=1}^{m} \sum_{j=1}^{n} b_{j i} a_{i j}=\sum_{i=1}^{n}(B A)_{i i}=\operatorname{tr}(B A)<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>生成学习算法</title>
    <url>/2021/04/13/%E7%94%9F%E6%88%90%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>判别学习算法的模型是通过一条分隔线把两种类别区分开，而生成学习算法是对两种可能的结果分别进行建模，然后分别和输入进行比对，计算出相应的概率.</p>
<a id="more"></a>
<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>我们常用的算法是逻辑回归，判别模型，即找到0和1之间的界限，找到一个决策边界，来区分0和1，而生成学习算法是通过0的特征学习出一个0的模型，根据1的特征学习出一个1的模型，对于一个新的样本，分别放入0 1的模型中，先求得是0的概率，再求是1的概率，进行比较，即可确定类型。这里计算概率使用的是贝叶斯公式。主要完成对$p(x|y)$和$p(y)$的建模</p>
<h1 id="二、高斯判别分析（Gaussian-Discriminant-Analysis）"><a href="#二、高斯判别分析（Gaussian-Discriminant-Analysis）" class="headerlink" title="二、高斯判别分析（Gaussian Discriminant Analysis）"></a>二、高斯判别分析（Gaussian Discriminant Analysis）</h1><p>假设$p(x|y)$满足多维正态分布<br><img src="https://i.loli.net/2021/04/13/TRWUmFtn3zkEeAr.png" alt="image.png"></p>
<p>概率分布为<br><img src="https://i.loli.net/2021/04/13/XaSEhYct9eJKRl3.png" alt="image.png"><br>极大似然估计求得所有的参数<br><img src="https://i.loli.net/2021/04/14/CV4r56NKAXZhvMU.png" alt="image.png"><br>其中，$ϕ$ 是训练样本中结果y=1占有的比例，$μ_0$是y=0的样本中特征均值，$μ_1$ 是y=1的样本中特征均值，$Σ$ 是样本特征方差均值。</p>
<p>注意这里的参数有$μ_0$和$μ_1$，表示在不同的结果模型下，特征均值不同，但我们假设协方差相同。反映在图上就是不同模型中心位置不同，但形状相同。这样就可以用直线来进行分隔判别。</p>
<p>所以我们得到这样的图像<br><img src="https://i.loli.net/2021/04/13/RndUHTPAOmJFz7V.png" alt="image.png"></p>
<h1 id="三、朴素贝叶斯（Naive-Bayes）"><a href="#三、朴素贝叶斯（Naive-Bayes）" class="headerlink" title="三、朴素贝叶斯（Naive Bayes）"></a>三、朴素贝叶斯（Naive Bayes）</h1><p>当$x$是离散值时，我们假设垃圾邮件分类的情况。将一封邮件作为输入向量，如果字典中第$i$个词在字典中出现，则$x_i$=1，反之$x_i$=0，这样我们得到所需的特征向量。</p>
<p>现在对$p(x|y)$建模，假设字典中有50000个词，$x \in{0,1}^{50000}$，如果采用多项式建模， 将会有$2^{50000}$种结果，$2^{50000}$−1维的参数向量，这样明显参数过多，很难进行计算。所以为了对$p(x|y)$建模，需要做一个强假设，假设x的特征是条件独立的，这个假设称为朴素贝叶斯假设(Naive Bayes (NB) assumption),这个算法就称为朴素贝叶斯分类(Naive Bayes classifier).</p>
<p>根据概率论的链式法则性质和朴素贝叶斯假设，我们可以得到如下等式<br><img src="https://i.loli.net/2021/04/14/UhLlwdFQGpriZ32.png" alt="image.png"></p>
<p>根据联合似然函数，再依次得到参数的最大似然估计值，我们对一个全新的样本进行预测，特征为$x$，则有<br><img src="https://i.loli.net/2021/04/14/vna2tAU735JVwZI.png" alt="image.png"></p>
<p>因为分母对于y取0或1是一样的，所以只需要计算比较分子即可确定分类。</p>
<h1 id="四、拉普拉斯平滑（Laplace-smoothing）"><a href="#四、拉普拉斯平滑（Laplace-smoothing）" class="headerlink" title="四、拉普拉斯平滑（Laplace smoothing）"></a>四、拉普拉斯平滑（Laplace smoothing）</h1><p>朴素贝叶斯模型已经能不错的解决离散值的问题，可是对于数据稀疏问题，朴素贝叶斯模型并不能很好的解决，还是针对邮件分类问题，假设收到了一封含有NIPS的邮件，但是NIPS从未在垃圾邮件或者正常邮件中出现过，假设NIPS在字典中位子伟35000，则计算概率时，<img src="https://i.loli.net/2021/04/14/DmwZnKpdGavJBjy.png" alt="image.png"><br>而后验概率计算得到的为$\frac{0}0$，也就不知道该如何预测了。</p>
<p>这里我们引入拉普拉斯平滑，将估计替换为</p>
<p><img src="https://i.loli.net/2021/04/14/mriZuhLe2sbWIJA.png" alt="image.png"></p>
<p>这里首先是对分子加1，然后对分母加k，要注意$\sum^k_{j=1} \phi_j = 1$依然成立（自己检验一下），这是一个必须有的性质，因为$\phi_j$<br>是对概率的估计，然后所有的概率加到一起必然等于1。另外对于所有的$j$值，都有$\phi_j \neq 0$，这就解决了刚刚的概率估计为零的问题了。在某些特定的条件下（相当强的假设条件下，arguably quite strong），可以发现拉普拉斯平滑还真能给出对参数$\phi_j$ 的最佳估计（optimal estimator）</p>
<p>在朴素贝叶斯问题上，使用拉普拉斯平滑后得到的公式则为<br><img src="https://i.loli.net/2021/04/14/WpkzK7cf4hrBH1F.png" alt="image.png"></p>
<p>注：在实际应用中，是否对$\phi_y$使用拉普拉斯平滑影响不大，因为$\phi_y$是对$p(y=1)$的一个合理估计，而垃圾邮件与正常邮件是成一定比例的，所以$\phi_y$与零点存在一定的距离。</p>
]]></content>
      <categories>
        <category>cs229</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>田宇航定理</title>
    <url>/2021/01/29/%E7%94%B0%E5%AE%87%E8%88%AA%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h3 id="电脑使用定理"><a href="#电脑使用定理" class="headerlink" title="电脑使用定理"></a>电脑使用定理</h3><ul>
<li><p>不要花时间折腾一些对于使用没什么大影响的东西，要看重内容</p>
</li>
<li><p>不影响使用的bug，如今天遇到的“体系结构 arm64 不受支持”这一C/C++扩展的bug，而且网上也找不到解决方案，不必折腾，让子弹飞一会儿</p>
</li>
<li><p>面对问题，要克制自己的冲动，选择bug最少的解决方案</p>
</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>网页视频倍速的小技巧</title>
    <url>/2021/02/17/%E7%BD%91%E9%A1%B5%E8%A7%86%E9%A2%91%E5%80%8D%E9%80%9F%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>今天玉米问到延河课堂上的视频能不能倍速，想到当时防疫大课堂时的操作，便想直接复现，但是却失败了</p>
<p>于是开始检查网页的代码有什么猫腻</p>
<p><img src="https://i.loli.net/2021/02/17/jx8hNQEyGpZkt4z.png" alt="image.png"></p>
<p>一开始看到注释中写着Flash添加处，还以为是flash播放器，便去寻找flash倍速的方法，感觉还是很麻烦</p>
<p>接着看代码，发现了好几个video标签，便猜测是不能准确捕获video标签的原因，找到视频对应的真实标签，然后通过ID获取此标签，再调整倍速即可</p>
<p><img src="https://i.loli.net/2021/02/17/49P3LfGa8E6IjkQ.png" alt="image.png"></p>
<p>如上图，发现所有的视频都是存在ID为”Video2_html5_api”的Video中，使用如下代码即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">var video= document.getElementById('Video2_html5_api');</span><br><span class="line">video.playbackRate=<span class="number">16</span></span><br></pre></td></tr></table></figure>

<p>注：播放速率可为0.025～16</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客的一点经验</title>
    <url>/2021/01/30/%E8%BF%81%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E7%82%B9%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<p>多次折腾hexo博客的一点心得</p>
<a id="more"></a>
<h2 id="迁移hexo博客相关"><a href="#迁移hexo博客相关" class="headerlink" title="迁移hexo博客相关"></a>迁移hexo博客相关</h2><p>要做的事情无非就是下面几步</p>
<ul>
<li>在新环境中安装git</li>
<li>在新环境中安装node</li>
<li>在新环境中安装hexo</li>
<li>复制Blog文件夹的全部内容到新环境</li>
<li>配置ssh，添加密钥到github</li>
<li>测试即可完成</li>
</ul>
<h2 id="hexo博客如何给一篇文章设立多个分类"><a href="#hexo博客如何给一篇文章设立多个分类" class="headerlink" title="hexo博客如何给一篇文章设立多个分类"></a>hexo博客如何给一篇文章设立多个分类</h2><p>从前以为下面的方式就是给一篇文章设置多个分类，最近才发现这样设置的是多级目录</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line">            - 技术</span><br><span class="line">            - Blog</span><br></pre></td></tr></table></figure>

<p>要想设置多个目录，只需要给分类加上[]即可，如下所示</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line">            - [技术]</span><br><span class="line">            - [Blog]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
